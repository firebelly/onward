// Mixins

// Global UI Transition
@mixin transition($properties...) {
  transition-duration: $transition-duration;
  transition-property: $properties;
  transition-timing-function: $transition-easing;
}

// Animated white bg + black underline hover for nav/footer links
@mixin slide-link($slide-target:'&') {
  #{$slide-target} {
    padding: 0 1px 2px 1px;
    // background-image: linear-gradient(to bottom, color(white) 94%, color(black) 95%);
    background-image: linear-gradient(to top, color(black) 2px, color(white) 2px, color(white) 100%);
    background-repeat: no-repeat;
    background-size: 0% 100%;
    @include transition(background-size, color);
  }
  &:hover,
  &:focus {
    #{$slide-target} {
      text-decoration: none;
      background-size: 100% 100%;
      transition-delay: 0s;
    }
  }

}

// Animated white bg hover for user-content links
@mixin inline-link($slide-target:'&') {
  #{$slide-target} {
    background-image: linear-gradient(to top, color(white) 0%, color(white) 100%);
    background-repeat: no-repeat;
    background-size: 0% 100%;
    text-decoration: underline;
    @include transition(background-size);
  }
  &:hover,
  &:focus {
    #{$slide-target} {
      background-size: 100% 100%;
      transition-delay: 0s;
    }
  }
}

// Faux dropshadow
@mixin drop-shadow() {
  &::after {
    content: '';
    position: absolute;
    width: 100%;
    top: 100%;
    left: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0.09) 0%, rgba(0,0,0,0.02) 50%, rgba(0,0,0,0) 100%);
    height: 16px;
    pointer-events: none;
  }
}

// Mixin for various theme colors
@mixin theme-color($property, $map: 'logo') {

  // Logo/H1 (default mapping)
  $theme-map: 'theme-orange' green,
              'theme-yellow' black,
              'theme-pink' orange,
              'theme-homepage' green;

  // Taglines outside accent blocks
  @if ($map == 'tape-tagline') {
    $theme-map: 'theme-orange' yellow,
                'theme-yellow' blue,
                'theme-pink' pink,
                'theme-homepage' yellow;
  } @else if ($map == 'tape-tagline-text') {
    $theme-map: 'theme-orange' black,
                'theme-yellow' tan,
                'theme-pink' black,
                'theme-homepage' black;

  // Accent colors for section changes
  } @else if ($map == 'accent1') {
    $theme-map: 'theme-orange' orange,
                'theme-yellow' yellow,
                'theme-pink' pink,
                'theme-homepage' yellow;
  } @else if ($map == 'accent2') {
    $theme-map: 'theme-orange' green,
                'theme-yellow' pink,
                'theme-pink' brown,
                'theme-homepage' pink;

  } @else if ($map == 'accent1-text') {
    $theme-map: 'theme-orange' black,
                'theme-yellow' black,
                'theme-pink' black,
                'theme-homepage' black;
  } @else if ($map == 'accent2-text') {
    $theme-map: 'theme-orange' tan,
                'theme-yellow' black,
                'theme-pink' tan,
                'theme-homepage' black;

  // Tagline colors inside section changes
  } @else if ($map == 'tape-tagline-accent1') {
    $theme-map: 'theme-orange' pink,
                'theme-yellow' yellow,
                'theme-pink' brown,
                'theme-homepage' green;
  } @else if ($map == 'tape-tagline-accent1-text') {
    $theme-map: 'theme-orange' black,
                'theme-yellow' black,
                'theme-pink' black,
                'theme-homepage' tan;
  } @else if ($map == 'tape-tagline-accent2') {
    $theme-map: 'theme-orange' orange,
                'theme-yellow' blue,
                'theme-pink' pink,
                'theme-homepage' yellow;
  } @else if ($map == 'tape-tagline-accent2-text') {
    $theme-map: 'theme-orange' black,
                'theme-yellow' black,
                'theme-pink' black,
                'theme-homepage' black;

  // Footers
  } @else if ($map == 'footer') {
    $theme-map: 'theme-orange' orange,
                'theme-yellow' pink,
                'theme-pink' pink,
                'theme-homepage' yellow;

  }

  // #{$property}: $default;
  $selector: &;

  // Loop through all schemes
  @each $color-scheme in $theme-map {
      $color-scheme-class: nth($color-scheme, 1);
      $color-scheme-color: nth($color-scheme, 2);

    // Prepend color-scheme selectors
    @at-root body[data-theme="#{$color-scheme-class}"] {
      // Apply rule
      #{$selector} {
        #{$property}: color($color-scheme-color);
      }
    }
  }
}

// Clearfix
@mixin clearfix {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}
%clearfix {
  @include clearfix;
}

@mixin vertical-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Screen reader only
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
}

// Aspect ratio padding mixin
@mixin aspect-ratio($width, $height) {
  display: block;
  // background-size: cover;
  // background-position: center;
  position: relative;
  height: 0;
  padding-top: #{$height / $width * 100%};
}

// Smooth text
@mixin smooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
%smooth {
  @include smooth;
}

// Responsive mixins by Andy Richardson (@andimal): https://github.com/andimal/sass-responsive-mixin-madness
@mixin media-xs() {
  @media screen and (max-width: $breakpoint-sm - 1) {
    @content;
  }
}
@mixin media-sm() {
  @media screen and (min-width: $breakpoint-sm) {
    @content;
  }
}
@mixin media-md() {
  @media screen and (min-width: $breakpoint-md) {
    @content;
  }
}
@mixin media-nav() {
  @media screen and (min-width: $breakpoint-nav) {
    @content;
  }
}
@mixin media-lg() {
  @media screen and (min-width: $breakpoint-lg) {
    @content;
  }
}
@mixin media-xl() {
  @media screen and (min-width: $breakpoint-xl) {
    @content;
  }
}

// On-the fly media-queries
@mixin screen($res-min, $res-max) {
  @media screen and (min-width: $res-min) and (max-width: #{$res-max - 1px}) {
    @content;
  }
}
@mixin max-screen($res) {
  @media screen and (max-width: #{$res - 1px}) {
    @content;
  }
}
@mixin min-screen($res) {
  @media screen and (min-width: $res) {
    @content;
  }
}
