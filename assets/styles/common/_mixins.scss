// Mixins

// Global UI Transition
@mixin transition($properties...) {
  transition-duration: $transition-duration;
  transition-property: $properties;
  transition-timing-function: $transition-easing;
}

// Inline link styles
@mixin inline-link($hover_bg: color(white), $hover_color: color(black)) {
  // display: inline;
  background-color: rgba($hover_bg, 0);
  transition: all 0.1s;
  padding: 0 2px;

  &:hover,
  &:focus {
    color: $hover_color;
    border-color: $hover_color;
    background-color: rgba($hover_bg, 1);
    // box-shadow: .2em .1em 0 rgba($hover_bg, 1), -.2em .1em 0 rgba($hover_bg, 1), -.2em 0 0 rgba($hover_bg, 1), .2em 0 0 rgba($hover_bg, 1);
    border-bottom: 2px solid $hover_color;
  }
}

@mixin underline-link($hover_color: color(white)) {
  background-image: linear-gradient(to bottom, transparent 20%, currentColor 21%);
  background-position: 0 1.2em;
  background-repeat: no-repeat;
  background-size: 0% 2px;
  transition: background-size 0.25s ease-in-out 0.2s;
  &:hover,
  &:focus {
    background-size: 100% 2px;
    transition-delay: 0s;
  }
}

// Fancy animated bg + underline link styles
@mixin slide-link($hover_color: color(white)) {
  display: inline-block;
  position: relative;
  background-color: rgba($hover_color, 0);
  @include transition(all);
  z-index: 1;
  padding: 0 2px;
  &:after,
  &:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: -0.1em;
    width: 0px;
    height: 100%;
    @include transition(all);
    opacity: 0;
    background-color: color(white);
    z-index: -1;
  }
  &:after {
    top: auto;
    height: 2px;
    background-color: color(black);
  }
  &:hover,
  &:focus {
    &:before,
    &:after {
      width: 100%;
      opacity: 1;
    }
    color: color(black);
  }
}

// Faux dropshadow
@mixin drop-shadow() {
  &::after {
    content: '';
    position: absolute;
    width: 100%;
    top: 100%;
    left: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0.15) 0%, rgba(0,0,0,0.05) 50%, rgba(0,0,0,0) 100%);
    height: 16px;
  }
}

@mixin theme-color($property, $map: 'primary') {
  $theme-map: 'theme-orange' green, 'theme-yellow' black, 'theme-pink' orange;
  @if ($map == 'accent') {
    $theme-map: 'theme-orange' orange, 'theme-yellow' yellow,  'theme-pink' brown;
  } @else if ($map == 'accent2') {
    $theme-map: 'theme-orange' orange, 'theme-yellow' pink,  'theme-pink' pink;
  // } @else if ($map == 'footer-outro') {
  //   $theme-map: 'theme-orange' green, 'theme-yellow' pink,  'theme-pink' pink;
  // } @else if ($map == 'footer') {
  //   $theme-map: 'theme-orange' orange, 'theme-yellow' pink,  'theme-pink' pink;
  }

  // #{$property}: $default;
  $selector: &;

  // Loop through all schemes
  @each $color-scheme in $theme-map {
      $color-scheme-class: nth($color-scheme, 1);
      $color-scheme-color: nth($color-scheme, 2);

    // Prepend color-scheme selectors
    @at-root body[data-theme="#{$color-scheme-class}"] {
      // Apply rule
      #{$selector} {
        #{$property}: color($color-scheme-color);
      }
    }
  }
}

// Clearfix
@mixin clearfix {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}
%clearfix {
  @include clearfix;
}

@mixin vertical-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Screen reader only
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
}

// Aspect ratio padding mixin
@mixin aspect-ratio($width, $height) {
  display: block;
  // background-size: cover;
  // background-position: center;
  position: relative;
  height: 0;
  padding-top: #{$height / $width * 100%};
}

// Smooth text
@mixin smooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
%smooth {
  @include smooth;
}

// Responsive mixins by Andy Richardson (@andimal): https://github.com/andimal/sass-responsive-mixin-madness
@mixin media-xs() {
  @media screen and (max-width: $breakpoint-sm - 1) {
    @content;
  }
}
@mixin media-sm() {
  @media screen and (min-width: $breakpoint-sm) {
    @content;
  }
}
@mixin media-md() {
  @media screen and (min-width: $breakpoint-md) {
    @content;
  }
}
@mixin media-nav() {
  @media screen and (min-width: $breakpoint-nav) {
    @content;
  }
}
@mixin media-lg() {
  @media screen and (min-width: $breakpoint-lg) {
    @content;
  }
}
@mixin media-xl() {
  @media screen and (min-width: $breakpoint-xl) {
    @content;
  }
}

// On-the fly media-queries
@mixin screen($res-min, $res-max) {
  @media screen and (min-width: $res-min) and (max-width: #{$res-max - 1px}) {
    @content;
  }
}
@mixin max-screen($res) {
  @media screen and (max-width: #{$res - 1px}) {
    @content;
  }
}
@mixin min-screen($res) {
  @media screen and (min-width: $res) {
    @content;
  }
}
